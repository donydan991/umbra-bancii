name: Umbra Bancii â€“ cron 15m
#â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# RuleazÄƒ la fiecare 15â€¯minute È™i manual din UI
#â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
on:
  schedule:
    - cron: '*/15 * * * *'
  workflow_dispatch:

#â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# 0) JOB helper â€“ citeÈ™te lista de 28 perechi
#â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
jobs:
  get-pairs:
    runs-on: ubuntu-latest
    outputs:
      json: ${{ steps.dump.outputs.json }}
    steps:
      - uses: actions/checkout@v4
      - id: dump
        run: |
          pairs=$(python - <<'PY'
import yaml, json, pathlib
pairs = yaml.safe_load(pathlib.Path("configs/pairs.yaml").read_text())["pairs"]
print(json.dumps(pairs))
PY
)
          echo "json=$pairs" >> $GITHUB_OUTPUT

#â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# 1) JOB MATRIX â€“ INGESTÂ FX   (28 perechi)
#â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  ingest_fx:
    needs: get-pairs
    runs-on: ubuntu-latest
    env:
      TWELVE_API_KEY: ${{ secrets.TWELVE_API_KEY }}
    strategy:
      fail-fast: false
      matrix:
        pair: ${{ fromJson(needs.get-pairs.outputs.json) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Install deps
        run: pip install yfinance pyyaml requests
      - name: Ingest ${{ matrix.pair }}
        run: python src/ingest_fx.py --pair ${{ matrix.pair }}
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.pair }}_yaml
          path: |
            *.yaml
          retention-days: 7

#â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# 2) JOB MATRIX â€“ INGESTÂ Calendar + News
#â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  ingest_misc:
    runs-on: ubuntu-latest
    env:
      FRED_API_KEY:   ${{ secrets.FRED_API_KEY }}
      NEWS_API_KEY:   ${{ secrets.NEWS_API_KEY }}
    strategy:
      matrix:
        module: [ingest_calendar, ingest_news]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Install deps
        run: pip install -r requirements.txt
      - name: Run ${{ matrix.module }}
        run: python src/${{ matrix.module }}.py
      - name: Upload reports
        uses: actions/upload-artifact@v4
        with:
          name: reports-${{ matrix.module }}
          path: output/
          retention-days: 7

#â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# 3) JOB FUSION  (dupÄƒ ambele ingestâ€‘uri)
#â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  fusion:
    needs: [ingest_fx, ingest_misc]
    runs-on: ubuntu-latest
    env:
      FRED_API_KEY:    ${{ secrets.FRED_API_KEY }}
      TWELVE_API_KEY:  ${{ secrets.TWELVE_API_KEY }}
      NEWS_API_KEY:    ${{ secrets.NEWS_API_KEY }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Install deps
        run: pip install -r requirements.txt
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: output
      - name: Run Pattern Fusion
        id: build_fusion
        run: python src/pattern_fusion.py
      - name: Upload fusion
        uses: actions/upload-artifact@v4
        with:
          name: reports-pattern_fusion
          path: output/PATTERN_FUSION_*.yaml
          retention-days: 7
      #â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      # ALERTÄ‚Â TELEGRAM
      #â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Send Telegram alert
        if: steps.build_fusion.outcome == 'success'
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID:  ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          yaml_file=$(ls output/PATTERN_FUSION_*.yaml | tail -1)
          verdict=$(grep '^verdict:' "$yaml_file" | awk '{print $2}')
          score=$(grep '^fusion_score:' "$yaml_file" | awk '{print $2}')
          ts=$(grep '^timestamp:' "$yaml_file" | awk '{print $2}')
          url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          case "$verdict" in
            BUY) icon="ðŸŸ¢";;
            SELL) icon="ðŸ”´";;
            STANDBY) icon="ðŸŸ ";;
            *) icon="ðŸ”µ";;
          esac
          text="$icon Umbraâ€¯BÄƒncii\nVerdict: *$verdict*  (score: $score)\n[$ts UTC]($url)"
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
               -d chat_id="${TELEGRAM_CHAT_ID}" \
               -d parse_mode="Markdown" \
               --data-urlencode text="$text"
