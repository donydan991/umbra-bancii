name: Umbra Bancii – cron 15m
#─────────────────────────────────────────────────────────────
# Rulează la fiecare 15 minute și manual din UI
#─────────────────────────────────────────────────────────────
on:
  schedule:
    - cron: '*/15 * * * *'
  workflow_dispatch:

#─────────────────────────────────────────────────────────────
# 1)  JOB MATRIX: INGEST   (fx, calendar, news)
#─────────────────────────────────────────────────────────────
jobs:
  ingest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module: [ingest_fx, ingest_calendar, ingest_news]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run ${{ matrix.module }}
        run: python src/${{ matrix.module }}.py

      - name: Upload reports ${{ matrix.module }}
        uses: actions/upload-artifact@v4
        with:
          name: reports-${{ matrix.module }}
          path: output/
          retention-days: 7

#─────────────────────────────────────────────────────────────
# 2)  JOB FUSION  (rulează după ce toate ingest‑urile sunt OK)
#─────────────────────────────────────────────────────────────
  fusion:
    needs: ingest
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # descărcăm TOATE artefactele generate de ingest într‑un subfolder
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: output

      # rulează algoritmul Pattern Fusion
      - name: Run Pattern Fusion
        id: build_fusion                 # ← dăm id pentru if‑ul de mai jos
        run: python src/pattern_fusion.py

      # încărcăm rezultatul Fusion ca artefact separat
      - name: Upload fusion
        uses: actions/upload-artifact@v4
        with:
          name: reports-pattern_fusion
          path: output/PATTERN_FUSION_*.yaml
          retention-days: 7

      #──────────────────────────────
      # ALERTĂ TELEGRAM BUY / SELL
      #──────────────────────────────
      - name: Send Telegram alert on BUY/SELL
        if: steps.build_fusion.outcome == 'success'
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID:  ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          verdict=$(grep '^verdict:' output/PATTERN_FUSION_*.yaml | awk '{print $2}')
          if [[ "$verdict" == "BUY" || "$verdict" == "SELL" ]]; then
            score=$(grep '^fusion_score:' output/PATTERN_FUSION_*.yaml | awk '{print $2}')
            ts=$(grep '^timestamp:' output/PATTERN_FUSION_*.yaml | awk '{print $2}')
            url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            text="🚨 Umbra Băncii\nVerdict: *$verdict*  (score: $score)\n[$ts UTC]($url)"
            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
                 -d chat_id="${TELEGRAM_CHAT_ID}" \
                 -d parse_mode="Markdown" \
                 --data-urlencode text="$text"
          else
            echo "Verdict $verdict → fără alertă"
          fi
