name: Umbra Bancii â€“ cron 60m

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch: {}

jobs:
  get-pairs:
    runs-on: ubuntu-latest
    outputs:
      json: ${{ steps.dump.outputs.json }}
    steps:
      - uses: actions/checkout@v4
      - id: dump
        shell: bash
        run: |
          pairs_json=$(python - <<'PY'
          import yaml, json, pathlib
          pairs = yaml.safe_load(pathlib.Path("configs/pairs.yaml").read_text())["pairs"]
          print(json.dumps(pairs))
          PY
          )
          echo "json=$pairs_json" >> "$GITHUB_OUTPUT"

  ingest_fx:
    needs: get-pairs
    runs-on: ubuntu-latest
    env:
      TWELVE_API_KEY: ${{ secrets.TWELVE_API_KEY }}
    strategy:
      fail-fast: false
      matrix:
        pair: ${{ fromJson(needs.get-pairs.outputs.json) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: pip install yfinance pyyaml requests
      - name: Ingest ${{ matrix.pair }}
        run: python src/ingest_fx.py --pair ${{ matrix.pair }}
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.pair }}_yaml
          path: "*.yaml"
          retention-days: 7

  ingest_misc:
    runs-on: ubuntu-latest
    env:
      FRED_API_KEY:  ${{ secrets.FRED_API_KEY }}
      NEWS_API_KEY:  ${{ secrets.NEWS_API_KEY }}
    strategy:
      matrix:
        module: [ingest_calendar, ingest_news]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: pip install -r requirements.txt
      - run: python src/${{ matrix.module }}.py
      - uses: actions/upload-artifact@v4
        with:
          name: reports-${{ matrix.module }}
          path: output/
          retention-days: 7

  fusion:
    needs: [ingest_fx, ingest_misc]
    runs-on: ubuntu-latest
    env:
      FRED_API_KEY:    ${{ secrets.FRED_API_KEY }}
      TWELVE_API_KEY:  ${{ secrets.TWELVE_API_KEY }}
      NEWS_API_KEY:    ${{ secrets.NEWS_API_KEY }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: pip install -r requirements.txt
      - uses: actions/download-artifact@v4
        with:
          path: output
      - id: build_fusion
        run: python src/pattern_fusion.py
      - uses: actions/upload-artifact@v4
        with:
          name: reports-pattern_fusion
          path: output/PATTERN_FUSION_*.yaml
          retention-days: 7
      - name: Send Telegram alert
        if: steps.build_fusion.outcome == 'success'
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}
        shell: bash
        run: |
          yaml_file=$(ls output/PATTERN_FUSION_*.yaml | tail -1)
          verdict=$(grep '^verdict:' "$yaml_file" | awk '{print $2}')
          score=$(grep '^fusion_score:' "$yaml_file" | awk '{print $2}')
          ts=$(grep '^timestamp:' "$yaml_file" | awk '{print $2}')
          url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          case "$verdict" in
            BUY) icon="ðŸŸ¢" ;;
            SELL) icon="ðŸ”´" ;;
            STANDBY) icon="ðŸŸ " ;;
            *) icon="ðŸ”µ" ;;
          esac
          text="$icon Umbraâ€¯BÄƒncii\nVerdict: *$verdict*  (score: $score)\n[$ts UTC]($url)"
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
               -d chat_id="${TELEGRAM_CHAT_ID}" \
               -d parse_mode="Markdown" \
               --data-urlencode text="$text"
